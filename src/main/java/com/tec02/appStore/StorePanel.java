/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.tec02.appStore;

import com.tec02.appStore.analysis.AppManagement;
import com.tec02.appStore.analysis.AppProccess;
import com.tec02.common.JOptionUtil;
import com.tec02.gui.Panelupdate;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 *
 * @author Administrator
 */
public class StorePanel extends Panelupdate {

    private final List<AppUnit> appUnits;
    private final AppManagement appManagement;

    /**
     * Creates new form StorePanel
     *
     * @param appManagement
     * @param rows
     * @param columns
     */
    public StorePanel(AppManagement appManagement, int rows, int columns) {
        this.appManagement = appManagement;
        this.appUnits = new ArrayList<>();
        initComponents();
        this.setLayout(new GridLayout(rows, columns, 0, 0));
        AppUnit appUnit;
        for (int i = 0; i < rows * columns; i++) {
            appUnit = new AppUnit();
            this.add(appUnit);
            this.appUnits.add(appUnit);
        }
        this.validate();
    }

    @Override
    public void update() {
        super.update();
        for (AppUnit appUnit : appUnits) {
            appUnit.update();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(102, 204, 255));
        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    public void clear() {
        for (AppUnit appUnit : appUnits) {
            appUnit.clear();
        }
        this.validate();
    }

    public void updateApp() {
        AppUnit appUnit;
        if (this.appManagement.isHasChange()) {
            Collection<AppProccess> appProccesses = this.appManagement.getAppProccesses().values();
            clear();
            for (AppProccess app : appProccesses) {
                if ((appUnit = findAppUnitFree()) != null) {
                    appUnit.setAppProccess(app);
                } else {
                    JOptionUtil.showMessage("App panel no have unit free");
                    break;
                }
            }
        }
    }

    private AppUnit findAppUnitFree() {
        for (AppUnit appUnit : appUnits) {
            if (appUnit.isFree()) {
                return appUnit;
            }
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
